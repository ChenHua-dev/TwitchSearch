{"version":3,"sources":["utils.js","components/Login.js","components/Register.js","components/Favorites.js","components/CustomSearch.js","components/Home.js","App.js","reportWebVitals.js","index.js"],"names":["SERVER_ORIGIN","loginUrl","login","credential","console","log","fetch","method","headers","credentials","body","JSON","stringify","then","response","status","Error","json","registerUrl","register","data","logoutUrl","logout","topGamesUrl","getGameDetailsUrl","searchGameByIdUrl","searchGameById","gameId","searchGameByName","gameName","getGameDetails","id","favoriteItemUrl","getFavoriteItem","getRecommendedItemsUrl","getRecommendations","Login","state","displayModal","onFinish","values","res","setState","props","onSuccess","message","success","name","catch","err","error","signinOnClick","handleCancel","this","shape","style","marginRight","onClick","title","visible","onCancel","footer","destroyOnClose","preserve","Item","rules","required","prefix","UserOutlined","className","placeholder","LockOutlined","type","htmlType","Component","Register","signupOnClick","SubMenu","Menu","MenuKey","Favorites","displayDrawer","onDrawerClose","VIDEO","STREAM","CLIP","onFavoriteClick","icon","StarFilled","placement","width","onClose","mode","defaultOpenKeys","height","borderRight","selectable","EyeOutlined","map","item","href","url","target","rel","broadcaster_name","YoutubeOutlined","VideoCameraOutlined","CustomSearch","searchOnClick","onSubmit","game_name","SearchOutlined","marginLeft","marginTop","TabPane","Tabs","tabKeys","renderCardTitle","loggedIn","favs","favOnChange","isFav","find","fav","StarOutlined","favItem","favorite","addFavoriteItem","overflow","textOverflow","renderCardGrid","grid","xs","sm","md","lg","xl","dataSource","renderItem","alt","src","thumbnail_url","replace","Home","resources","favoriteItems","favoriteOnChange","favVideos","favStreams","favClips","defaultActiveKey","tab","forceRender","Header","Layout","Sider","Content","Footer","App","topGames","render","justify","signoutOnClick","display","signinOnSuccess","customSearchOnSuccess","onSelect","onGameSelect","LikeOutlined","FireOutlined","game","box_art_url","borderRadius","padding","margin","textAlign","key","React","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.96d6655c.chunk.js","sourcesContent":["// If you don't want to host your server code and client code together, you can\n// pay AWS to host your server with HTTPS then config the api url endpoints like below\n// const SERVER_ORIGIN = '<Your server's url>';\n\nconst SERVER_ORIGIN = '';\n\nconst loginUrl = `${SERVER_ORIGIN}/login`;\nexport const login = (credential) => {\n    console.log('login')\n    return fetch(loginUrl, {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json',},\n        credentials: 'include',\n        body: JSON.stringify(credential)\n    }).then((response) => {\n        console.log(response);\n        if (response.status !== 200) {\n            throw Error('Fail to log in');\n        }\n        return response.json();\n    })\n}\n\n\nconst registerUrl = `${SERVER_ORIGIN}/register`;\nexport const register = data => {\n    return fetch(registerUrl, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data)\n    }).then((response) => {\n        if (response.status !== 200) {\n            throw Error('Fail to register');\n        }\n    })\n}\n\n\nconst logoutUrl = `${SERVER_ORIGIN}/logout`;\nexport const logout = () => {\n    return fetch(logoutUrl, {\n        method: 'POST',\n        credentials: 'include',\n    }).then((response) => {\n        if (response.status !== 200) {\n            throw Error('Fail to log out');\n        }\n    })\n}\n\n\nconst topGamesUrl = `${SERVER_ORIGIN}/game`;\nexport const getTopGames = () => {\n    return fetch(topGamesUrl).then((response) => {\n        if (response.status !== 200) {\n            throw Error('Fail to get top games');\n        }\n\n        return response.json();\n    })\n}\n\n\nconst getGameDetailsUrl = `${SERVER_ORIGIN}/game?game_name=`;\nconst getGameDetails = (gameName) => {\n    return fetch(`${getGameDetailsUrl}${gameName}`).then((response) => {\n        if (response.status !== 200) {\n            throw Error('Fail to find the game');\n        }\n\n        return response.json();\n    });\n}\n\n\nconst searchGameByIdUrl = `${SERVER_ORIGIN}/search?game_id=`;\nexport const searchGameById = (gameId) => {\n    return fetch(`${searchGameByIdUrl}${gameId}`).then((response) => {\n        if (response.status !== 200) {\n            throw Error('Fail to find the game');\n        }\n        return response.json();\n    })\n}\n\nexport const searchGameByName = (gameName) => {\n    return getGameDetails(gameName).then((data) => {\n        if (data && data.id) {\n            return searchGameById(data.id);\n        }\n\n        throw Error('Fail to find the game')\n    })\n}\n\n\nconst favoriteItemUrl = `${SERVER_ORIGIN}/favorite`;\nexport const addFavoriteItem = (favItem) => {\n    return fetch(favoriteItemUrl, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n        body: JSON.stringify({ favorite: favItem })\n    }).then((response) => {\n        if (response.status !== 200) {\n            throw Error('Fail to add favorite item');\n        }\n    })\n}\n\n\nexport const deleteFavoriteItem = (favItem) => {\n    return fetch(favoriteItemUrl, {\n        method: 'DELETE',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n        body: JSON.stringify({ favorite: favItem })\n    }).then((response) => {\n        if (response.status !== 200) {\n            throw Error('Fail to delete favorite item');\n        }\n    })\n}\n\nexport const getFavoriteItem = () => {\n    return fetch(favoriteItemUrl, {\n        credentials: 'include',\n    }).then((response) => {\n        if (response.status !== 200) {\n            throw Error('Fail to get favorite item');\n        }\n\n        return response.json();\n    })\n}\n\n\nconst getRecommendedItemsUrl = `${SERVER_ORIGIN}/recommendation`;\nexport const getRecommendations = () => {\n    return fetch(getRecommendedItemsUrl, {\n        credentials: 'include',\n    }).then((response) => {\n        if (response.status !== 200) {\n            throw Error('Fail to get recommended item');\n        }\n\n        return response.json();\n    })\n}\n\n\n\n\n// If you don't want to host your server code and client code together, you can\n// pay AWS to host your server with HTTPS then config the api url endpoints like below\n// const SERVER_ORIGIN = '<Your server's url>';\n// const SERVER_ORIGIN = '';\n//\n// const loginUrl = `${SERVER_ORIGIN}/login`;\n//\n// export const login = (credential) => {\n//     return fetch(loginUrl, {\n//         method: 'POST',\n//         headers: {\n//             'Content-Type': 'application/json',\n//         },\n//         credentials: 'include',\n//         body: JSON.stringify(credential)\n//     }).then((response) => {\n//         if (response.status !== 200) {\n//             throw Error('Fail to log in');\n//         }\n//\n//         return response.json();\n//     })\n// }\n//\n// const registerUrl = `${SERVER_ORIGIN}/register`;\n//\n// export const register = (data) => {\n//     return fetch(registerUrl, {\n//         method: 'POST',\n//         headers: {\n//             'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify(data)\n//     }).then((response) => {\n//         if (response.status !== 200) {\n//             throw Error('Fail to register');\n//         }\n//     })\n// }\n//\n// const logoutUrl = `${SERVER_ORIGIN}/logout`;\n//\n// export const logout = () => {\n//     return fetch(logoutUrl, {\n//         method: 'POST',\n//         credentials: 'include',\n//     }).then((response) => {\n//         if (response.status !== 200) {\n//             throw Error('Fail to log out');\n//         }\n//     })\n// }\n//\n// const topGamesUrl = `${SERVER_ORIGIN}/game`;\n//\n// export const getTopGames = () => {\n//     return fetch(topGamesUrl).then((response) => {\n//         if (response.status !== 200) {\n//             throw Error('Fail to get top games');\n//         }\n//\n//         return response.json();\n//     })\n// }\n//\n// const getGameDetailsUrl = `${SERVER_ORIGIN}/game?game_name=`;\n//\n// const getGameDetails = (gameName) => {\n//     return fetch(`${getGameDetailsUrl}${gameName}`).then((response) => {\n//         if (response.status !== 200) {\n//             throw Error('Fail to find the game');\n//         }\n//\n//         return response.json();\n//     });\n// }\n//\n// const searchGameByIdUrl = `${SERVER_ORIGIN}/search?game_id=`;\n//\n// export const searchGameById = (gameId) => {\n//     return fetch(`${searchGameByIdUrl}${gameId}`).then((response) => {\n//         if (response.status !== 200) {\n//             throw Error('Fail to find the game');\n//         }\n//         return response.json();\n//     })\n// }\n//\n// export const searchGameByName = (gameName) => {\n//     return getGameDetails(gameName).then((data) => {\n//         if (data && data.id) {\n//             return searchGameById(data.id);\n//         }\n//\n//         throw Error('Fail to find the game')\n//     })\n// }\n//\n// const favoriteItemUrl = `${SERVER_ORIGIN}/favorite`;\n//\n// export const addFavoriteItem = (favItem) => {\n//     return fetch(favoriteItemUrl, {\n//         method: 'POST',\n//         headers: {\n//             'Content-Type': 'application/json',\n//         },\n//         credentials: 'include',\n//         body: JSON.stringify({ favorite: favItem })\n//     }).then((response) => {\n//         if (response.status !== 200) {\n//             throw Error('Fail to add favorite item');\n//         }\n//     })\n// }\n//\n// export const deleteFavoriteItem = (favItem) => {\n//     return fetch(favoriteItemUrl, {\n//         method: 'DELETE',\n//         headers: {\n//             'Content-Type': 'application/json',\n//         },\n//         credentials: 'include',\n//         body: JSON.stringify({ favorite: favItem })\n//     }).then((response) => {\n//         if (response.status !== 200) {\n//             throw Error('Fail to delete favorite item');\n//         }\n//     })\n// }\n//\n// export const getFavoriteItem = () => {\n//     return fetch(favoriteItemUrl, {\n//         credentials: 'include',\n//     }).then((response) => {\n//         if (response.status !== 200) {\n//             throw Error('Fail to get favorite item');\n//         }\n//\n//         return response.json();\n//     })\n// }\n//\n// const getRecommendedItemsUrl = `${SERVER_ORIGIN}/recommendation`;\n//\n// export const getRecommendations = () => {\n//     return fetch(getRecommendedItemsUrl, {\n//         credentials: 'include',\n//     }).then((response) => {\n//         if (response.status !== 200) {\n//             throw Error('Fail to get recommended item');\n//         }\n//\n//         return response.json();\n//     })\n// }","import React, {Component} from 'react';\nimport { Modal, Button, Form, Input, message} from 'antd';\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\nimport { login } from '../utils';\n\nclass Login extends Component {\n    state = {\n        displayModal: false\n    };\n\n    render() {\n        const { displayModal } = this.state;\n        return (\n            <div>\n                <Button shape=\"round\"\n                        style={{ marginRight: '20px'}}\n                        onClick={this.signinOnClick} >\n                    Login\n                </Button>\n                <Modal title=\"Login in\"\n                       visible={displayModal}\n                       onCancel={this.handleCancel}\n                       footer={null}\n                       destroyOnClose={true}\n                >\n                    <Form\n                        name=\"normal_login\"\n                        onFinish={this.onFinish}\n                        preserve={false}\n                    >\n                        <Form.Item\n                            name=\"user_id\"\n                            rules={[\n                                {\n                                    required: true,\n                                    message: 'Please input your Username!',\n                                },\n                            ]}\n                        >\n                            <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Username\" />\n                        </Form.Item>\n\n                        <Form.Item\n                            name=\"password\"\n                            rules={[\n                                {\n                                    required: true,\n                                    message: 'Please input your Password!',\n                                },\n                            ]}\n                        >\n                            <Input\n                                prefix={<LockOutlined className=\"site-form-item-icon\" />}\n                                type=\"password\"\n                                placeholder=\"Password\"\n                            />\n                        </Form.Item>\n\n                        <Form.Item>\n                            <Button type=\"primary\" htmlType=\"submit\">\n                                Log in\n                            </Button>\n                        </Form.Item>\n\n                    </Form>\n                </Modal>\n            </div>\n        );\n    }\n\n    onFinish = (values) => {\n        console.log('Received values of form: ', values);\n        login(values).then(res => {\n            console.log(res)\n            // close the modal\n            this.setState({displayModal: false});\n            // inform App.js (login status)\n            this.props.onSuccess();\n            message.success(`Welcome, ${res.name}`);\n        }).catch(err => {\n                message.error(err.message);\n            })\n    }\n\n    signinOnClick = () => {\n        // displayModal => true\n        console.log('sign in clicked');\n        this.setState({displayModal: true});\n    }\n\n    handleCancel = () => {\n        // displayModal => false\n        console.log('on cancel clicked');\n        this.setState({displayModal: false});\n    }\n\n}\n\nexport default Login;\n\n// import { Button, Form, Input, message, Modal } from 'antd';\n// import React from 'react';\n// import { LockOutlined, UserOutlined } from '@ant-design/icons';\n// import { login } from '../utils';\n//\n// class Login extends React.Component {\n//     state = {\n//         displayModal: false\n//     }\n//\n//     handleCancel = () => {\n//         this.setState({\n//             displayModal: false,\n//         })\n//     }\n//\n//     signinOnClick = () => {\n//         this.setState({\n//             displayModal: true,\n//         })\n//     }\n//\n//     onFinish = (data) => {\n//         login(data)\n//             .then((data) => {\n//                 this.setState({\n//                     displayModal: false,\n//                 })\n//                 message.success(`Welcome back, ${data.name}`);\n//                 this.props.onSuccess();\n//             }).catch((err) => {\n//             message.error(err.message);\n//         })\n//     }\n//\n//     render = () => {\n//         return (\n//             <>\n//                 <Button shape=\"round\" onClick={this.signinOnClick} style={{ marginRight: '20px' }}>\n//                     Login</Button>\n//                 <Modal\n//                     title=\"Log in\"\n//                     visible={this.state.displayModal}\n//                     onCancel={this.handleCancel}\n//                     footer={null}\n//                     destroyOnClose={true}\n//                 >\n//                     <Form\n//                         name=\"normal_login\"\n//                         onFinish={this.onFinish}\n//                         preserve={false}\n//                     >\n//                         <Form.Item\n//                             name=\"user_id\"\n//                             rules={[{ required: true, message: 'Please input your Username!' }]}\n//                         >\n//                             <Input prefix={<UserOutlined />} placeholder=\"Username\" />\n//                         </Form.Item>\n//                         <Form.Item\n//                             name=\"password\"\n//                             rules={[{ required: true, message: 'Please input your Password!' }]}\n//                         >\n//                             <Input\n//                                 prefix={<LockOutlined />}\n//                                 placeholder=\"Password\"\n//                             />\n//                         </Form.Item>\n//\n//                         <Form.Item>\n//                             <Button type=\"primary\" htmlType=\"submit\">\n//                                 Login</Button>\n//                         </Form.Item>\n//                     </Form>\n//                 </Modal>\n//             </>\n//         )\n//     }\n// }\n//\n// export default Login;","import React, {Component} from 'react';\nimport {Modal, Button, Form, Input, message} from 'antd';\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\nimport { register } from \"../utils\";\n\nclass Register extends Component {\n    state = {\n        displayModal: false\n    };\n\n    render() {\n        const { displayModal } = this.state;\n        return (\n            <div>\n                <Button shape=\"round\"\n                        type=\"primary\"\n                        style={{ marginRight: '20px'}}\n                        onClick={this.signupOnClick} >\n                    Register\n                </Button>\n                <Modal title=\"Register\"\n                       visible={displayModal}\n                       onCancel={this.handleCancel}\n                       footer={null}\n                       destroyOnClose={true}\n                >\n                    <Form\n                        name=\"normal_register\"\n                        onFinish={this.onFinish}\n                        preserve={false}\n                    >\n                        <Form.Item\n                            name=\"first_name\"\n                            rules={[{ required: true, message: 'Please input your Firstname!' }]}\n                        >\n                            <Input\n                                placeholder=\"firstname\"\n                            />\n                        </Form.Item>\n                        <Form.Item\n                            name=\"last_name\"\n                            rules={[{ required: true, message: 'Please input your Lastname!' }]}\n                        >\n                            <Input\n                                placeholder=\"lastname\"\n                            />\n                        </Form.Item>\n\n                        <Form.Item\n                            name=\"user_id\"\n                            rules={[\n                                {\n                                    required: true,\n                                    message: 'Please input your Username!',\n                                },\n                            ]}\n                        >\n                            <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Username\" />\n                        </Form.Item>\n\n                        <Form.Item\n                            name=\"password\"\n                            rules={[\n                                {\n                                    required: true,\n                                    message: 'Please input your Password!',\n                                },\n                            ]}\n                        >\n                            <Input\n                                prefix={<LockOutlined className=\"site-form-item-icon\" />}\n                                type=\"password\"\n                                placeholder=\"Password\"\n                            />\n                        </Form.Item>\n\n                        <Form.Item>\n                            <Button type=\"primary\" htmlType=\"submit\">\n                                Register\n                            </Button>\n                        </Form.Item>\n\n                    </Form>\n                </Modal>\n            </div>\n        );\n    }\n\n    signupOnClick = () => {\n        // displayModal => true\n        console.log('register button clicked');\n        this.setState({displayModal: true});\n    }\n\n    handleCancel = () => {\n        // displayModal => false\n        console.log('on cancel clicked');\n        this.setState({displayModal: false});\n    }\n\n    onFinish = (values) => {\n        // step 1: collect user name/password/first name/last name from the form\n        // step 2:\n        console.log('Received values of form: ', values);\n        register(values).then(res => {\n            console.log(res)\n            // close the modal\n            this.setState({displayModal: false});\n            message.success(\"Registered successfully!\");\n        }).catch(err => {\n            message.error(err.message);\n        })\n    }\n\n}\n\nexport default Register;\n\n\n// import { Button, Form, Input, message, Modal } from 'antd';\n// import React from 'react';\n// import { LockOutlined, UserOutlined } from '@ant-design/icons';\n// import { register } from '../utils';\n//\n// class Register extends React.Component {\n//     state = {\n//         displayModal: false\n//     }\n//\n//     handleCancel = () => {\n//         this.setState({\n//             displayModal: false,\n//         })\n//     }\n//\n//     signupOnClick = () => {\n//         this.setState({\n//             displayModal: true,\n//         })\n//     }\n//\n//     onFinish = (data) => {\n//         register(data)\n//             .then(() => {\n//                 this.setState({\n//                     displayModal: false,\n//                 })\n//                 message.success(`Successfully signed up`);\n//             }).catch((err) => {\n//             message.error(err.message);\n//         })\n//     }\n//\n//     render = () => {\n//         return (\n//             <>\n//                 <Button shape=\"round\" type=\"primary\" onClick={this.signupOnClick}>\n//                     Register</Button>\n//                 <Modal\n//                     title=\"Register\"\n//                     visible={this.state.displayModal}\n//                     onCancel={this.handleCancel}\n//                     footer={null}\n//                     destroyOnClose={true}\n//                 >\n//                     <Form\n//                         name=\"normal_register\"\n//                         initialValues={{ remember: true }}\n//                         onFinish={this.onFinish}\n//                         preserve={false}\n//                     >\n//                         <Form.Item\n//                             name=\"user_id\"\n//                             rules={[{ required: true, message: 'Please input your Username!' }]}\n//                         >\n//                             <Input prefix={<UserOutlined />} placeholder=\"Username\" />\n//                         </Form.Item>\n//                         <Form.Item\n//                             name=\"password\"\n//                             rules={[{ required: true, message: 'Please input your Password!' }]}\n//                         >\n//                             <Input\n//                                 prefix={<LockOutlined />}\n//                                 placeholder=\"Password\"\n//                             />\n//                         </Form.Item>\n//                         <Form.Item\n//                             name=\"first_name\"\n//                             rules={[{ required: true, message: 'Please input your Firstname!' }]}\n//                         >\n//                             <Input\n//                                 placeholder=\"firstname\"\n//                             />\n//                         </Form.Item>\n//                         <Form.Item\n//                             name=\"last_name\"\n//                             rules={[{ required: true, message: 'Please input your Lastname!' }]}\n//                         >\n//                             <Input\n//                                 placeholder=\"lastname\"\n//                             />\n//                         </Form.Item>\n//\n//                         <Form.Item>\n//                             <Button type=\"primary\" htmlType=\"submit\">\n//                                 Register</Button>\n//                         </Form.Item>\n//                     </Form>\n//                 </Modal>\n//             </>\n//         )\n//     }\n// }\n//\n// export default Register;","import React, {Component} from 'react';\nimport { Menu, Button, Drawer, message } from 'antd';\nimport { EyeOutlined, YoutubeOutlined, VideoCameraOutlined, StarFilled } from '@ant-design/icons';\nimport { getFavoriteItem } from '../utils';\n\nconst { SubMenu } = Menu;\nconst MenuKey = {\n    Streams: 'streams',\n    Videos: 'videos',\n    Clips: 'clips'\n}\n\nclass Favorites extends Component {\n    state = {\n        displayDrawer: false,\n        // data: {\n        //     VIDEO: [],\n        //     STREAM: [],\n        //     CLIP: [],\n        // }\n    }\n\n    onDrawerClose = () => {\n        this.setState({\n            displayDrawer: false,\n            data: {\n                VIDEO: [],\n                STREAM: [],\n                CLIP: [],\n            }\n        })\n    }\n\n    onFavoriteClick = () => {\n        // step 1: get favorite items\n        // step 2: set displayDrawer to be true\n        // getFavoriteItem()\n        //     .then((data) => {\n        //         console.log(data);\n        //         this.setState({\n        //             data: data,\n        //             displayDrawer: true,\n        //         })\n        //     }).\n        //     catch((err) => {\n        //         message.error(err.message);\n        //     })\n        this.setState({\n            displayDrawer: true,\n        })\n    }\n\n    render() {\n        // const { VIDEO, STREAM, CLIP } = this.state.data;\n        const { VIDEO, STREAM, CLIP } = this.props.data;\n        return (\n            <div>\n                <Button type=\"primary\" shape=\"round\" onClick={this.onFavoriteClick} icon={<StarFilled />}>\n                    My Favorites\n                </Button>\n                <Drawer\n                    title=\"My Favorites\"\n                    placement=\"right\"\n                    width={720}\n                    visible={this.state.displayDrawer}\n                    onClose={this.onDrawerClose}\n                >\n                    <Menu\n                        mode=\"inline\"\n                        defaultOpenKeys={[MenuKey.Streams]}\n                        style={{ height: '100%', borderRight: 0 }}\n                        selectable={false}\n                    >\n                        <SubMenu key={MenuKey.Streams} icon={<EyeOutlined />} title=\"Streams\">\n                            {\n                                STREAM.map((item) => {\n                                    return (\n                                        <Menu.Item key={item.id}>\n                                            <a href={item.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                                                {`${item.broadcaster_name} - ${item.title}`}\n                                            </a>\n                                        </Menu.Item>\n                                    )\n                                })\n                            }\n                        </SubMenu>\n                        <SubMenu key={MenuKey.Videos} icon={<YoutubeOutlined />} title=\"Videos\">\n                            {\n                                VIDEO.map((item) => {\n                                    return (\n                                        <Menu.Item key={item.id}>\n                                            <a href={item.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                                                {`${item.broadcaster_name} - ${item.title}`}\n                                            </a>\n                                        </Menu.Item>\n                                    )\n\n                                })\n                            }\n                        </SubMenu>\n                        <SubMenu key={MenuKey.Clips} icon={<VideoCameraOutlined />} title=\"Clips\">\n                            {\n                                CLIP.map((item) => {\n                                    return (\n                                        <Menu.Item key={item.id}>\n                                            <a href={item.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                                                {`${item.broadcaster_name} - ${item.title}`}\n                                            </a>\n                                        </Menu.Item>\n                                    )\n                                })\n                            }\n                        </SubMenu>\n                    </Menu>\n                </Drawer>\n            </div>\n        );\n    }\n}\n\nexport default Favorites;\n\n\n\n\n\n\n// import React, {Component} from 'react';\n// import { Menu, Button, Drawer, message } from 'antd';\n// import { EyeOutlined, YoutubeOutlined, VideoCameraOutlined, StarFilled } from '@ant-design/icons';\n// import { getFavoriteItem } from '../utils';\n//\n// const { SubMenu } = Menu;\n// const MenuKey = {\n//     Streams: 'streams',\n//     Videos: 'videos',\n//     Clips: 'clips'\n// }\n//\n// class Favorites extends Component {\n//\n//     state = {\n//         displayDrawer: false,\n//         // data: {\n//         //     VIDEO: [],\n//         //     STREAM: [],\n//         //     CLIP: [],\n//         // }\n//     }\n//\n//     onDrawerClose = () => {\n//         this.setState({\n//             displayDrawer: false,\n//         })\n//     }\n//\n//     onFavoriteClick = () => {\n//         // step 1: get favorite items\n//         // step 2: set displayDrawer to be true\n//         // getFavoriteItem()\n//         //     .then((data) => {\n//         //         console.log(data);\n//         //         this.setState({\n//         //             data: data,\n//         //             displayDrawer: true,\n//         //         })\n//         //     })\n//         //     .catch((err) => {\n//         //     message.error(err.message);\n//         //     })\n//         this.setState({\n//             displayDrawer: true,\n//         })\n//     }\n//\n//\n//     render() {\n//         // const { VIDEO, STREAM, CLIP } = this.state.data;\n//         const { VIDEO, STREAM, CLIP } = this.props.data;\n//         return (\n//             <div>\n//                 <Button type=\"primary\" shape=\"round\" onClick={this.onFavoriteClick} icon={<StarFilled />}>\n//                     My Favorites</Button>\n//\n//                 <Drawer\n//                     title=\"My Favorites\"\n//                     placement=\"right\"\n//                     width={720}\n//                     visible={this.state.displayDrawer}\n//                     onClose={this.onDrawerClose}\n//                 >\n//                     <Menu\n//                         mode=\"inline\"\n//                         defaultOpenKeys={[MenuKey.Streams]}\n//                         style={{ height: '100%', borderRight: 0 }}\n//                         selectable={false}\n//                     >\n//                         <SubMenu key={MenuKey.Streams} icon={<EyeOutlined />} title=\"Streams\">\n//                             {\n//                                 STREAM.map((item) => {\n//                                     return (\n//                                         <Menu.Item key={item.id}>\n//                                             <a href={item.url} target=\"_blank\" rel=\"noopener noreferrer\">\n//                                                 {`${item.broadcaster_name} - ${item.title}`}\n//                                             </a>\n//                                         </Menu.Item>\n//                                     )\n//                                 })\n//                             }\n//                         </SubMenu>\n//                         <SubMenu key={MenuKey.Videos} icon={<YoutubeOutlined />} title=\"Videos\">\n//                             {\n//                                 VIDEO.map((item) => {\n//                                     return (\n//                                         <Menu.Item key={item.id}>\n//                                             <a href={item.url} target=\"_blank\" rel=\"noopener noreferrer\">\n//                                                 {`${item.broadcaster_name} - ${item.title}`}\n//                                             </a>\n//                                         </Menu.Item>\n//                                     )\n//                                 })\n//                             }\n//                         </SubMenu>\n//                         <SubMenu key={MenuKey.Clips} icon={<VideoCameraOutlined />} title=\"Clips\">\n//                             {\n//                                 CLIP.map((item) => {\n//                                     return (\n//                                         <Menu.Item key={item.id}>\n//                                             <a href={item.url} target=\"_blank\" rel=\"noopener noreferrer\">\n//                                                 {`${item.broadcaster_name} - ${item.title}`}\n//                                             </a>\n//                                         </Menu.Item>\n//                                     )\n//                                 })\n//                             }\n//                         </SubMenu>\n//                     </Menu>\n//\n//                 </Drawer>\n//             </div>\n//         );\n//     }\n// }\n//\n// export default Favorites;\n\n// import React from 'react';\n// import { Menu, Button, Drawer } from 'antd';\n// import { EyeOutlined, YoutubeOutlined, VideoCameraOutlined, StarFilled } from '@ant-design/icons';\n//\n// const { SubMenu } = Menu;\n// const MenuKey = {\n//     Streams: 'streams',\n//     Videos: 'videos',\n//     Clips: 'clips'\n// }\n// class Favorites extends React.Component {\n//     state = {\n//         displayDrawer: false,\n//     }\n//\n//     onDrawerClose = () => {\n//         this.setState({\n//             displayDrawer: false,\n//         })\n//     }\n//\n//     onFavoriteClick = () => {\n//         this.setState({\n//             displayDrawer: true,\n//         })\n//     }\n//\n//     render = () => {\n//         const { VIDEO, STREAM, CLIP } = this.props.data;\n//\n//         return (\n//             <>\n//                 <Button type=\"primary\" shape=\"round\" onClick={this.onFavoriteClick} icon={<StarFilled />}>\n//                     My Favorites</Button>\n//                 <Drawer\n//                     title=\"My Favorites\"\n//                     placement=\"right\"\n//                     width={720}\n//                     visible={this.state.displayDrawer}\n//                     onClose={this.onDrawerClose}\n//                 >\n//                     <Menu\n//                         mode=\"inline\"\n//                         defaultOpenKeys={[MenuKey.Streams]}\n//                         style={{ height: '100%', borderRight: 0 }}\n//                         selectable={false}\n//                     >\n//                         <SubMenu key={MenuKey.Streams} icon={<EyeOutlined />} title=\"Streams\">\n//                             {\n//                                 STREAM.map((item) => {\n//                                     return (\n//                                         <Menu.Item key={item.id}>\n//                                             <a href={item.url} target=\"_blank\" rel=\"noopener noreferrer\">\n//                                                 {`${item.broadcaster_name} - ${item.title}`}\n//                                             </a>\n//                                         </Menu.Item>\n//                                     )\n//                                 })\n//                             }\n//                         </SubMenu>\n//                         <SubMenu key={MenuKey.Videos} icon={<YoutubeOutlined />} title=\"Videos\">\n//                             {\n//                                 VIDEO.map((item) => {\n//                                     return (\n//                                         <Menu.Item key={item.id}>\n//                                             <a href={item.url} target=\"_blank\" rel=\"noopener noreferrer\">\n//                                                 {`${item.broadcaster_name} - ${item.title}`}\n//                                             </a>\n//                                         </Menu.Item>\n//                                     )\n//                                 })\n//                             }\n//                         </SubMenu>\n//                         <SubMenu key={MenuKey.Clips} icon={<VideoCameraOutlined />} title=\"Clips\">\n//                             {\n//                                 CLIP.map((item) => {\n//                                     return (\n//                                         <Menu.Item key={item.id}>\n//                                             <a href={item.url} target=\"_blank\" rel=\"noopener noreferrer\">\n//                                                 {`${item.broadcaster_name} - ${item.title}`}\n//                                             </a>\n//                                         </Menu.Item>\n//                                     )\n//                                 })\n//                             }\n//                         </SubMenu>\n//                     </Menu>\n//                 </Drawer>\n//             </>\n//         )\n//     }\n// }\n//\n// export default Favorites;","import React, {Component} from 'react';\nimport { Button, Form, Input, message, Modal } from 'antd';\nimport { SearchOutlined } from '@ant-design/icons';\nimport { searchGameByName } from '../utils';\n\nclass CustomSearch extends Component {\n    state = {\n        displayModal: false\n    }\n\n    searchOnClick = () => {\n        this.setState({\n            displayModal: true,\n        })\n    }\n\n    handleCancel = () => {\n        this.setState({\n            displayModal: false,\n        })\n    }\n\n    render() {\n        return (\n            <>\n                <Button\n                    shape=\"round\"\n                    onClick={this.searchOnClick}\n                    icon={<SearchOutlined />}\n                    style={{ marginLeft: '20px', marginTop: '20px'}}>\n                Custom Search\n                </Button>\n                <Modal\n                    title=\"Custom Search\"\n                    visible={this.state.displayModal}\n                    onCancel={this.handleCancel}\n                    footer={null}>\n                    <Form\n                        name=\"custom_search\"\n                        onFinish={this.onSubmit}>\n                        <Form.Item name=\"game_name\"\n                                   rules={[{ required: true, message: 'Please enter a game name' }]}>\n                            <Input placeholder=\"Game name\" />\n                        </Form.Item>\n\n                        <Form.Item>\n                            <Button type=\"primary\" htmlType=\"submit\">\n                                Search\n                            </Button>\n                        </Form.Item>\n                    </Form>\n                </Modal>\n            </>\n        );\n    }\n\n    onSubmit = (data) => {\n        // step 1: get search keyword\n        // step 2: do search on the server\n        searchGameByName(data.game_name)\n            .then((data) => {\n                console.log(data);\n                this.props.onSuccess(data);\n            })\n            .catch((err) => {\n                message.error(err.message);\n            })\n    }\n\n}\n\nexport default CustomSearch;\n\n\n\n// import React, {Component} from 'react';\n// import { Button, Form, Input, message, Modal } from 'antd';\n// import { SearchOutlined } from '@ant-design/icons';\n// import { searchGameByName } from '../utils';\n//\n// class CustomSearch extends Component {\n//     state = {\n//         displayModal: false\n//     }\n//\n//     handleCancel = () => {\n//         this.setState({\n//             displayModal: false,\n//         })\n//     }\n//\n//     searchOnClick = () => {\n//         this.setState({\n//             displayModal: true,\n//         })\n//     }\n//\n//     onSubmit = (data) => {\n//         // step 1: get search keyword\n//         // step 2: do search on the server\n//         searchGameByName(data.game_name)\n//             .then((data) => {\n//                 console.log(data);\n//                 this.props.onSuccess(data);\n//             })\n//             .catch((err) => {\n//                 message.error(err.message);\n//             })\n//     }\n//\n//     render() {\n//         return (\n//             <>\n//                 <Button shape=\"round\" onClick={this.searchOnClick} icon={<SearchOutlined />} style={{ marginLeft: '20px', marginTop: '20px'}}>\n//                     Custom Search</Button>\n//                 <Modal\n//                     title=\"Custom Search\"\n//                     visible={this.state.displayModal}\n//                     onCancel={this.handleCancel}\n//                     footer={null}\n//                 >\n//                     <Form\n//                         name=\"custom_search\"\n//                         onFinish={this.onSubmit}\n//                     >\n//                         <Form.Item\n//                             name=\"game_name\"\n//                             rules={[{ required: true, message: 'Please enter a game name' }]}\n//                         >\n//                             <Input placeholder=\"Game name\" />\n//                         </Form.Item>\n//\n//                         <Form.Item>\n//                             <Button type=\"primary\" htmlType=\"submit\">\n//                                 Search</Button>\n//                         </Form.Item>\n//                     </Form>\n//                 </Modal>\n//             </>\n//         );\n//     }\n// }\n//\n// export default CustomSearch;\n\n// import React from 'react';\n// import { Button, Form, Input, message, Modal } from 'antd';\n// import { SearchOutlined } from '@ant-design/icons';\n// import { searchGameByName } from '../utils';\n//\n// class CustomSearch extends React.Component {\n//     state = {\n//         displayModal: false\n//     }\n//\n//     handleCancel = () => {\n//         this.setState({\n//             displayModal: false,\n//         })\n//     }\n//\n//     searchOnClick = () => {\n//         this.setState({\n//             displayModal: true,\n//         })\n//     }\n//\n//     onSubmit = (data) => {\n//         searchGameByName(data.game_name)\n//             .then((data) => {\n//                 this.setState({\n//                     displayModal: false,\n//                 })\n//                 this.props.onSuccess(data);\n//             })\n//             .catch((err) => {\n//                 message.error(err.message);\n//             })\n//     }\n//\n//     render = () => {\n//         return (\n//             <>\n//                 <Button shape=\"round\" onClick={this.searchOnClick} icon={<SearchOutlined />} style={{ marginLeft: '20px', marginTop: '20px'}}>\n//                     Custom Search </Button>\n//                 <Modal\n//                     title=\"Search\"\n//                     visible={this.state.displayModal}\n//                     onCancel={this.handleCancel}\n//                     footer={null}\n//                 >\n//                     <Form\n//                         name=\"custom_search\"\n//                         onFinish={this.onSubmit}\n//                     >\n//                         <Form.Item\n//                             name=\"game_name\"\n//                             rules={[{ required: true, message: 'Please enter a game name' }]}\n//                         >\n//                             <Input placeholder=\"Game name\" />\n//                         </Form.Item>\n//\n//                         <Form.Item>\n//                             <Button type=\"primary\" htmlType=\"submit\">\n//                                 Search</Button>\n//                         </Form.Item>\n//                     </Form>\n//                 </Modal>\n//             </>\n//         )\n//     }\n// }\n//\n// export default CustomSearch;","import React from 'react';\nimport { Button, Card, List, message, Tabs, Tooltip } from 'antd';\nimport { StarOutlined, StarFilled } from '@ant-design/icons';\nimport { addFavoriteItem, deleteFavoriteItem } from '../utils';\n\nconst { TabPane } = Tabs;\nconst tabKeys = {\n    Streams: 'stream',\n    Videos: 'videos',\n    Clips: 'clips',\n}\n\nconst processUrl = (url) => url\n    .replace('%{height}', '252')\n    .replace('%{width}', '480')\n    .replace('{height}', '252')\n    .replace('{width}', '480');\n\nconst renderCardTitle = (item, loggedIn, favs, favOnChange) => {\n    const title = `${item.broadcaster_name} - ${item.title}`;\n    const isFav = favs.find((fav) => fav.id === item.id);\n\n    const favOnClick = () => {\n        if (isFav) {\n            deleteFavoriteItem(item).then(() => {\n                favOnChange();\n            }).catch(err => {\n                message.error(err.message)\n            })\n\n            return;\n        }\n\n        addFavoriteItem(item).then(() => {\n            favOnChange();\n        }).catch(err => {\n            message.error(err.message)\n        })\n    }\n\n    return (\n        <div>\n            {\n                loggedIn &&\n                <Tooltip title={isFav ? \"Remove from favorite list\" : \"Add to favorite list\"}>\n                    <Button shape=\"circle\"\n                            icon={isFav ? <StarFilled /> : <StarOutlined />}\n                            onClick={favOnClick}/>\n                </Tooltip>\n            }\n            <div style={{ overflow: 'hidden', textOverflow: 'ellipsis', width: 450 }}>\n                <Tooltip title={title}>\n                    <span>{title}</span>\n                </Tooltip>\n            </div>\n        </div>\n    )\n}\n\nconst renderCardGrid = (data, loggedIn, favs, favOnChange) => {\n    return (\n        <List\n            grid={{\n                xs: 1,\n                sm: 2,\n                md: 4,\n                lg: 4,\n                xl: 6,\n            }}\n            dataSource={data}\n            renderItem={item => (\n                <List.Item style={{ marginRight: '20px' }}>\n                    <Card\n                        title={renderCardTitle(item, loggedIn, favs, favOnChange)}\n                    >\n                        <a href={item.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                            <img\n                                alt=\"Placeholder\"\n                                src={processUrl(item.thumbnail_url)}\n                            />\n                        </a>\n                    </Card>\n                </List.Item>\n            )}\n        />\n    )\n}\n\nconst Home = ({ resources, loggedIn, favoriteItems, favoriteOnChange }) => {\n    const { VIDEO, STREAM, CLIP } = resources;\n    const { VIDEO: favVideos, STREAM: favStreams, CLIP: favClips} = favoriteItems;\n\n    return (\n        <Tabs defaultActiveKey={tabKeys.Streams}>\n            <TabPane\n                tab=\"Streams\"\n                key={tabKeys.Streams}\n                style={{ height: '680px', overflow: 'auto' }}\n                forceRender={true}>\n                { renderCardGrid(STREAM, loggedIn, favStreams, favoriteOnChange) }\n            </TabPane>\n            <TabPane\n                tab=\"Videos\"\n                key={tabKeys.Videos}\n                style={{ height: '680px', overflow: 'auto' }}\n                forceRender={true}>\n                { renderCardGrid(VIDEO, loggedIn, favVideos, favoriteOnChange) }\n            </TabPane>\n            <TabPane\n                tab=\"Clips\"\n                key={tabKeys.Clips}\n                style={{ height: '680px', overflow: 'auto' }}\n                forceRender={true}>\n                { renderCardGrid(CLIP, loggedIn, favClips, favoriteOnChange) }\n            </TabPane>\n        </Tabs>\n    );\n}\n\nexport default Home;\n\n\n// import React, {Component} from 'react';\n// import { Button, Card, List, message, Tabs, Tooltip } from 'antd';\n// import { StarOutlined, StarFilled } from '@ant-design/icons';\n// import { addFavoriteItem, deleteFavoriteItem } from '../utils';\n//\n// const { TabPane } = Tabs;\n// const tabKeys = {\n//     Streams: 'stream',\n//     Videos: 'videos',\n//     Clips: 'clips',\n// }\n//\n// const processUrl = (url) => url\n//     .replace('%{height}', '252')\n//     .replace('%{width}', '480')\n//     .replace('{height}', '252')\n//     .replace('{width}', '480');\n//\n// const renderCardTitle = (item, loggedIn, favs, favOnChange) => {\n//     const title = `${item.broadcaster_name} - ${item.title}`;\n//\n//     const isFav = favs.find((fav) => fav.id === item.id);\n//\n//     const favOnClick = () => {\n//         if (isFav) {\n//             deleteFavoriteItem(item).then(() => {\n//                 favOnChange();\n//             }).catch(err => {\n//                 message.error(err.message)\n//             })\n//\n//             return;\n//         }\n//\n//         addFavoriteItem(item).then(() => {\n//             favOnChange();\n//         }).catch(err => {\n//             message.error(err.message)\n//         })\n//     }\n//\n//     return (\n//         <div>\n//             {\n//                 loggedIn &&\n//                 <Tooltip title={isFav ? \"Remove from favorite list\" : \"Add to favorite list\"}>\n//                     <Button shape=\"circle\" icon={isFav ? <StarFilled /> : <StarOutlined />} onClick={favOnClick} />\n//                 </Tooltip>\n//             }\n//             <div style={{ overflow: 'hidden', textOverflow: 'ellipsis', width: 450 }}>\n//                 <Tooltip title={title}>\n//                     <span>{title}</span>\n//                 </Tooltip>\n//             </div>\n//         </div>\n//     )\n// }\n//\n//\n// const renderCardGrid = (data, loggedIn, favs, favOnChange) => {\n//     return (\n//         <List\n//             grid={{\n//                 xs: 1,\n//                 sm: 2,\n//                 md: 4,\n//                 lg: 4,\n//                 xl: 6,\n//             }}\n//             dataSource={data}\n//             renderItem={item => (\n//                 <List.Item style={{ marginRight: '20px' }}>\n//                     <Card\n//                         title={renderCardTitle(item, loggedIn, favs, favOnChange)}\n//                     >\n//                         <a href={item.url} target=\"_blank\" rel=\"noopener noreferrer\">\n//                             <img\n//                                 alt=\"Placeholder\"\n//                                 src={processUrl(item.thumbnail_url)}\n//                             />\n//                         </a>\n//                     </Card>\n//                 </List.Item>\n//             )}\n//         />\n//     )\n// }\n//\n// const Home = ({ resources, loggedIn, favoriteItems, favoriteOnChange }) => {\n//     const { VIDEO, STREAM, CLIP } = resources;\n//     const { VIDEO: favVideos, STREAM: favStreams, CLIP: favClips} = favoriteItems;\n//\n//     return (\n//         <Tabs\n//             defaultActiveKey={tabKeys.Streams}\n//         >\n//             <TabPane\n//                 tab=\"Streams\"\n//                 key={tabKeys.Streams}\n//                 style={{ height: '680px', overflow: 'auto' }}\n//                 forceRender={true}>\n//                 {renderCardGrid(STREAM, loggedIn, favoriteItems, favoriteOnChange)}\n//             </TabPane>\n//\n//             <TabPane\n//                 tab=\"Videos\"\n//                 key={tabKeys.Videos}\n//                 style={{ height: '680px', overflow: 'auto' }}\n//                 forceRender={true}>\n//                 {renderCardGrid(VIDEO, loggedIn, favoriteItems, favoriteOnChange)}\n//             </TabPane>\n//\n//             <TabPane\n//                 tab=\"Clips\"\n//                 key={tabKeys.Clips}\n//                 style={{ height: '680px', overflow: 'auto' }}\n//                 forceRender={true}>\n//                 {renderCardGrid(CLIP, loggedIn, favoriteItems, favoriteOnChange)}\n//             </TabPane>\n//         </Tabs>\n//     );\n//\n// }\n//\n//\n// export default Home;","import React from 'react';\nimport { Button, Col, Layout, Menu, message, Row } from 'antd';\nimport Login from './components/Login';\nimport Register from './components/Register';\nimport { getRecommendations, getTopGames, logout, searchGameById, getFavoriteItem } from './utils';\nimport Favorites from \"./components/Favorites\";\nimport { LikeOutlined, FireOutlined } from '@ant-design/icons';\nimport CustomSearch from './components/CustomSearch';\nimport Home from \"./components/Home\";\n\nconst {Header, Sider, Content, Footer} = Layout;\nconst {SubMenu} = Menu;\n\nclass App extends React.Component {\n    state = {\n        loggedIn: false,\n        topGames: [],\n        resources: {\n            VIDEO: [],\n            STREAM: [],\n            CLIP: [],\n        },\n        favoriteItems: {\n            VIDEO: [],\n            STREAM: [],\n            CLIP: [],\n        },\n    }\n\n    componentDidMount() {\n        getTopGames()\n            .then((data) => {\n                console.log(\"top games => :\", data);\n                // render top games\n                this.setState({\n                    topGames: data\n                });\n            })\n            .catch((err) => {\n                message.error(err.message);\n            })\n    }\n\n    render = () => {\n        const {loggedIn} = this.state;\n\n        return (\n            <Layout>\n                <Header>\n                    <Row justify=\"space-between\">\n                        <Col>\n                            {\n                                loggedIn\n                                && <Favorites data={this.state.favoriteItems}/>\n                            }\n                        </Col>\n                        <Col>\n                            {\n                                // case 1: user already logged in\n                                // case2: user hasn't logged in\n                                loggedIn ?\n                                    <Button shape=\"round\" onClick={this.signoutOnClick}>\n                                        Logout</Button>\n                                    :\n                                    <div style={{display: 'flex'}}>\n                                        <Login onSuccess={this.signinOnSuccess}/>\n                                        <Register/>\n                                    </div>\n                            }\n                        </Col>\n                    </Row>\n                </Header>\n                <Layout>\n                    <Sider width={300}\n                           className=\"site-layout-background\">\n                        <CustomSearch\n                            onSuccess={this.customSearchOnSuccess}/>\n                        <Menu\n                            mode=\"inline\"\n                            onSelect={this.onGameSelect}\n                            style={{ marginTop: '10px' }}\n                        >\n                            <Menu.Item icon={<LikeOutlined />} key=\"Recommendation\">\n                                Recommend for you!\n                            </Menu.Item>\n                            <SubMenu\n                                icon={<FireOutlined />}\n                                key=\"Popular Games\" title=\"Popular Games\" className=\"site-top-game-list\" >\n                                {\n                                    this.state.topGames.map((game) => {\n                                        return (\n                                            <Menu.Item key={game.id} style={{ height: '50px' }}>\n                                                <img\n                                                    alt=\"Placeholder\"\n                                                    src={game.box_art_url\n                                                        .replace('{height}', '40')\n                                                        .replace('{width}', '40')}\n                                                    style={{ borderRadius: '50%', marginRight: '20px' }}\n                                                />\n                                                <span>\n                                                 {game.name}\n                                                </span>\n                                            </Menu.Item>\n                                        )\n                                    })\n                                }\n                            </SubMenu>\n                        </Menu>\n                    </Sider>\n                    <Layout style={{padding: '24px'}}>\n                        <Content\n                            className=\"site-layout-background\"\n                            style={{\n                                padding: 24,\n                                margin: 0,\n                                height: 800,\n                                overflow: 'auto'\n                            }}\n                        >\n                            <Home\n                                resources={this.state.resources}\n                                loggedIn={this.state.loggedIn}\n                                favoriteItems={this.state.favoriteItems}\n                                favoriteOnChange={this.favoriteOnChange}\n                            />\n                        </Content>\n                        <Footer style={{textAlign: 'center'}}>Twitch+ ©2021 Created by Chen Hua</Footer>\n                    </Layout>\n                </Layout>\n            </Layout>\n\n        )\n    }\n\n    favoriteOnChange = () => {\n        getFavoriteItem().then((data) => {\n            this.setState({\n                favoriteItems: data,\n                loggedIn: true\n            })\n        }).catch((err) => {\n            message.error(err.message);\n        })\n    }\n\n    signinOnSuccess = () => {\n        // this.setState({\n        //     loggedIn: true\n        // })\n        getFavoriteItem().then((data) => {\n            this.setState({\n                favoriteItems: data,\n                loggedIn: true\n            })\n        }).catch((err) => {\n            message.error(err.message);\n        })\n    }\n\n    signoutOnClick = () => {\n        logout()\n            .then(() => {\n                this.setState({\n                    loggedIn: false\n                })\n                message.success(`Successfull signed out`);\n            })\n            .catch((err) => {\n                message.error(err.message);\n            })\n    }\n\n    customSearchOnSuccess = (data) => {\n        this.setState({\n            resources: data,\n        })\n    }\n\n    onGameSelect = ({key}) => {\n        if (key === 'Recommendation') {\n            getRecommendations().then((data) => {\n                this.setState({\n                    resources: data,\n                })\n            })\n            return;\n        }\n\n        searchGameById(key).then((data) => {\n            this.setState({\n                resources: data,\n            })\n        })\n    }\n\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  // <React.StrictMode>\n  //   <App />\n  // </React.StrictMode>,\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}